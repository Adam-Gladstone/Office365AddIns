ggplot2 notes
-------------
Reference: https://ggplot2-book.org/getting-started


Data*: the information you want to visualise
Mapping*: the description of how the data’s variables are mapped to aesthetic attributes.
	Layers*: A layer is a collection of geometric elements and statistical transformations
		geoms
		stats
	Scales: Scales map values in the data space to values in the aesthetic space
	Coordinates: A coord describes how data coordinates are mapped to the plane of the graphic
	Facets: A facet specifies how to break up and display subsets of data as small multiples
	Theme: A theme controls the finer points of display, like the font size and background colour


The three key components of every plot: data, aesthetics and geoms

* Almost every plot maps a variable to x and y, so naming these aesthetics is tedious, so the first two unnamed arguments to aes() will be mapped to x and y.
* colour, shape and size => when passed as top-level aes, the colour, shape and size are mapped from factors AND added to the legend; if passed without aes(...) directly to geom, then the mapping is applied as above but does not appear in the legend. Some care required when passing colours into geoms OUTSIDE of an aes(...)
ie. this works: geom_point(aes(colour = class))
but this doesn't: geom_point(colour = class)
NOTE: This is saying something different: the first is saying map different classes (2seater, compact, suv...) to different colours; the second is saying draw the points in the colour - which in this case is not a colour.

* Another technique for displaying additional categorical variables on a plot is faceting (instead of trying to display a single graph with all classes of vehicles for example). Faceting creates tables of graphics by splitting the data into subsets and displaying the same graph for each subset. 

NOTE: Bar charts can be confusing because there are two rather different plots that are both commonly called bar charts. The above form expects you to have unsummarised data, and each observation contributes one unit to the height of each bar. The other form of bar chart is used for presummarised data. For example, you might have three drugs with their average effect:

Aesthetics
----------
// https://bookdown.org/yih_huynh/Guide-to-R-Book/basic-aesthetics.html#coloring-structural-elements
Some aesthetics need to be nested within aes() and some do not. 
How do we know when to place them outside versus inside?

- Aesthetics for a specific variable of your data go inside aes().
- An aesthetic that will remain a constant value – irrespective of the values of your data – should be placed outside of aes() and within the geom element.

"Note that using aes() inside the ggplot() layer specifies aesthetics globally, meaning they pass down to all subsequent geom layers in the plot. Specifying aesthetics in aes() within a geom means you are only specifying the aesthetics for that specific layer only. "

"Consider the code chunk below:

library(ggplot2)

df <- data.frame(
  x = c(1, 2), y = c(2, 1)
)

ggplot(df, aes(x, y + 1)) +
  geom_point(colour = "green") +
  geom_line(aes(colour = "blue"))
Here, the aes(x, y + 1) means aes(x = x, y = y + 1) which sets the x and y aesthetics that some layers understand to the x and y columns of the dataframe. This is because aes() has three arguments, x, y and .... By not declaring x = x for example, the first variable x is matched to the x parameter through the position in the function call. Other parameters than x or y must be named, for example aes(size = 10) and get passed trough ... to become part of the mapping (which are name-expression pairs).

Because the expression y = y + 1 is evaluated using 'non standard evaluation' in aes(), the scoping rules change and the variable y will first be attempted to be evaluated in the context of the data columns and not in the global environment, and hence we can 'calculate' the +1 on the dataframe columns.

It's not the aes() function that determines what are valid argument = value mappings, it is the layers that accept or reject parameters. You can find the parameters a layer accepts in the documentation of the layer, for example in ?geom_point, you see that it understands x, y, alpha, colour, fill, group, shape, size and stroke. You should be able to find these back if you call your_geom_layer$geom$aesthetics(). Extension packages can define their own layers with their own aesthetics, such as the area in the {treemap} package.

Additionally, because we've defined aes(x, y + 1) in the main ggplot() call, it will applied to every geometry or stat layer in that plot, in this case the points and the line. Hence, we do not need to repeat the same mapping in every layer but it is inherited unless you set inherit.aes = FALSE in a layer.

In the point layer we've defined colour = "green" outside the aes() function, so it will be interpreted literally (and follows standard evaluation with the usual scoping rules). People also call this a 'static' mapping, and you can only use this in layers and not globally. In contrast, because we've defined aes(colour = "blue") in the line layer, the "blue" will be interpreted as a categorical variable that participates in a colour scale that has it's own palette (a 'dynamic' mapping). If you execute the code, you'll see that the line is not blue, but a salmon-ish colour with a legend that maps the categorical value "blue" to a discrete scale with a 1-colour palette. Because "blue" is not a column in the dataframe, nor a variable in the global environment, it will be interpreted as a length 1 vector that will be recycled to fit the number of rows in the dataframe.

In general, if you want to map something to a scale (including position scales such as x and y), you put it inside aes(). If you want to have a literal interpretation, you put it outside aes() at the relevant layer."



https://ggplot2.tidyverse.org/reference/layer_stats.html

Facet wraps are a useful way to view individual CATEGORIES in their own graph.
For example, if you wanted to make a separate graph for each cut measuring the price (y axis) for each clarity (x axis), you could add facet_wrap(~cut).
The tilde (~) can be read as “by” as in: > “I want to make a new graph separated by cut categories.”
Further, you can specify the number of columns/rows to display as such

Geoms
[OK]	abline	Line, specified by slope and intercept
[OK]	area	Area plots
[OK]	bar	Bars, rectangles with bases on y-axis
[OK]	boxplot	Box-and-whisker plot
[]	col
[]	contour	Display contours of a 3d surface in 2d
[OK]	crossbar	Hollow bar with middle indicated by horizontal line
[OK]	density	Display a smooth density estimate
[]	density2d	Contours from a 2d density estimate
[OK]	dotplot
[OK]	errorbar	Error bars
[]	histogram	Histogram
[OK]	hline	Line, horizontal
[]	interval	Base for all interval (range) geoms
[]	jitter	Points, jittered to reduce overplotting
[OK]	line	Connect observations, in order of x value
[OK]	linerange	An interval represented by a vertical line
[]	path	Connect observations, in original order
[OK]	point	Points, as for a scatterplot
[OK]	pointrange	An interval represented by a vertical line, with a point in the middle
[]	polygon	Polygon, a filled path
[]	quantile	Add quantile lines from a quantile regression
[]	ribbon	Ribbons, y range with continuous x values
[]	rug	Marginal rug plots
[]	segment	Single line segments
[OK]	smooth	Add a smoothed condition mean
[OK]	step	Connect observations by stairs
[OK]	text	Textual annotations
[]	tile	Tile plot as densely as possible, assuming that every tile is the same size
[OK]	vline	Line, vertical

Aesthetics
https://ggplot2.tidyverse.org/reference/aes_position.html
Details
x and y define the locations of points or of positions along a line or path.

x, y and xend, yend define the starting and ending points of segment and curve geometries.

xmin, xmax, ymin and ymax can be used to specify the position of annotations and to represent rectangular areas.

In addition, there are position aesthetics that are contextual to the geometry that they're used in. These are xintercept, yintercept, xmin_final, ymin_final, xmax_final, ymax_final, xlower, lower, xmiddle, middle, xupper, upper, x0 and y0.

















